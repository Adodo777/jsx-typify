name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: |
        # Test de l'exemple fourni
        node example/run-example.js
        
        # Test du CLI
        node bin/jsx-typify.js --help
        
        # V√©rification que les fichiers g√©n√©r√©s existent
        if [ -f "example/SimpleComponent.typed.jsx" ]; then
          echo "‚úÖ Fichier .typed.jsx g√©n√©r√© avec succ√®s"
        else
          echo "‚ùå Fichier .typed.jsx manquant"
          exit 1
        fi
        
        if [ -f "example/SimpleComponent.props.md" ]; then
          echo "‚úÖ Documentation Markdown g√©n√©r√©e"
        else
          echo "‚ùå Documentation Markdown manquante"
          exit 1
        fi
        
        if [ -f "example/SimpleComponent.props.json" ]; then
          echo "‚úÖ Documentation JSON g√©n√©r√©e"
        else
          echo "‚ùå Documentation JSON manquante"
          exit 1
        fi
        
        if [ -f "example/SimpleComponent.props.d.ts" ]; then
          echo "‚úÖ Documentation TypeScript g√©n√©r√©e"
        else
          echo "‚ùå Documentation TypeScript manquante"
          exit 1
        fi
        
        if [ -f "example/SimpleComponent.props.jsdoc" ]; then
          echo "‚úÖ Documentation JSDoc g√©n√©r√©e"
        else
          echo "‚ùå Documentation JSDoc manquante"
          exit 1
        fi
        
    - name: List generated files
      run: |
        echo "üìÅ Fichiers g√©n√©r√©s :"
        ls -la example/*.typed.jsx example/*.props.* 2>/dev/null || echo "Aucun fichier g√©n√©r√© trouv√©"
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          example/SimpleComponent.typed.jsx
          example/SimpleComponent.props.md
          example/SimpleComponent.props.json
          example/SimpleComponent.props.d.ts
          example/SimpleComponent.props.jsdoc
        retention-days: 7

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check code formatting
      run: |
        # V√©rification de la syntaxe des fichiers JS
        node -c bin/jsx-typify.js
        node -c typify/parse.js
        node -c typify/parser.js
        node -c typify/propTypeGenerator.js
        node -c typify/defaultPropGenerator.js
        node -c typify/docGenerator.js
        node -c typify/typeMapping.js
        node -c example/run-example.js
        
        echo "‚úÖ Tous les fichiers JavaScript sont syntaxiquement corrects"
        
    - name: Check package.json
      run: |
        # V√©rification que package.json est valide
        node -e "JSON.parse(require('fs').readFileSync('package.json', 'utf8')); console.log('‚úÖ package.json est valide')"
        
        # V√©rification des champs requis
        if node -e "const pkg = JSON.parse(require('fs').readFileSync('package.json', 'utf8')); if (!pkg.name || !pkg.version || !pkg.bin) { console.error('‚ùå Champs requis manquants dans package.json'); process.exit(1); } else { console.log('‚úÖ Tous les champs requis sont pr√©sents') }"; then
          echo "‚úÖ package.json contient tous les champs requis"
        else
          exit 1
        fi

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level moderate
      
    - name: Check for known vulnerabilities
      run: |
        # V√©rification des vuln√©rabilit√©s connues
        if npm audit --audit-level high; then
          echo "‚úÖ Aucune vuln√©rabilit√© critique d√©tect√©e"
        else
          echo "‚ö†Ô∏è Vuln√©rabilit√©s d√©tect√©es - √† examiner"
        fi 