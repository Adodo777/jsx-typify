const path = require('path');
const { injectPropTypes } = require('../typify/parse.js');

console.log('üöÄ Test CI - Exemple d\'utilisation de jsx-typify');
console.log('===============================================\n');

try {
  // Utiliser des chemins absolus pour √©viter les probl√®mes de r√©pertoire
  const currentDir = process.cwd();
  const exampleFile = path.join(currentDir, 'example', 'SimpleComponent.jsx');
  
  console.log('üìÅ R√©pertoire de travail:', currentDir);
  console.log('üìÑ Fichier √† traiter:', exampleFile);
  
  // V√©rifier que le fichier existe
  const fs = require('fs');
  if (!fs.existsSync(exampleFile)) {
    throw new Error(`Fichier non trouv√©: ${exampleFile}`);
  }
  
  // Transforme le composant d'exemple
  injectPropTypes(exampleFile);
  
  console.log('‚úÖ Transformation r√©ussie !');
  
  // V√©rifier que les fichiers ont √©t√© g√©n√©r√©s
  const generatedFiles = [
    'example/SimpleComponent.typed.jsx',
    'example/SimpleComponent.props.md',
    'example/SimpleComponent.props.json',
    'example/SimpleComponent.props.d.ts',
    'example/SimpleComponent.props.jsdoc'
  ];
  
  console.log('üìÅ Fichiers g√©n√©r√©s :');
  generatedFiles.forEach(file => {
    const fullPath = path.join(currentDir, file);
    if (fs.existsSync(fullPath)) {
      console.log(`   ‚úÖ ${file}`);
    } else {
      console.log(`   ‚ùå ${file} (manquant)`);
      throw new Error(`Fichier g√©n√©r√© manquant: ${file}`);
    }
  });
  
  console.log('\nüéØ Fonctionnalit√©s d√©montr√©es :');
  console.log('   ‚Ä¢ Types simples : String, Number, Boolean');
  console.log('   ‚Ä¢ √âv√©nements DOM : Event(\'ClickEvent\')');
  console.log('   ‚Ä¢ Objets avec structure : { name: String, email: String }');
  console.log('   ‚Ä¢ Tableaux typ√©s : [String]');
  console.log('   ‚Ä¢ Valeurs par d√©faut : .defaults({ ... })');
  
} catch (error) {
  console.error('‚ùå Erreur lors de la transformation:', error.message);
  console.error('Stack trace:', error.stack);
  process.exit(1);
} 